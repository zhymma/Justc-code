get train data loader...
  0%|          | 0/1730 [00:00<?, ?it/s]100%|██████████| 1730/1730 [00:00<00:00, 67433.79it/s]
get dev data loader...
  0%|          | 0/433 [00:00<?, ?it/s]100%|██████████| 433/433 [00:00<00:00, 9898.37it/s]
define model...
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.seq_relationship.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.bias', 'cls.predictions.decoder.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
define optimizer...
===========================train setting parameters=========================
bert.embeddings.word_embeddings.weight-torch.Size([30522, 768])
bert.embeddings.position_embeddings.weight-torch.Size([512, 768])
bert.embeddings.token_type_embeddings.weight-torch.Size([2, 768])
bert.embeddings.LayerNorm.weight-torch.Size([768])
bert.embeddings.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.0.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.0.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.0.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.0.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.0.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.0.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.0.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.0.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.0.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.0.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.0.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.0.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.0.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.0.output.dense.bias-torch.Size([768])
bert.encoder.layer.0.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.0.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.1.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.1.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.1.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.1.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.1.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.1.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.1.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.1.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.1.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.1.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.1.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.1.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.1.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.1.output.dense.bias-torch.Size([768])
bert.encoder.layer.1.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.1.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.2.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.2.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.2.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.2.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.2.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.2.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.2.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.2.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.2.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.2.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.2.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.2.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.2.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.2.output.dense.bias-torch.Size([768])
bert.encoder.layer.2.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.2.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.3.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.3.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.3.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.3.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.3.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.3.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.3.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.3.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.3.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.3.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.3.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.3.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.3.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.3.output.dense.bias-torch.Size([768])
bert.encoder.layer.3.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.3.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.4.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.4.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.4.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.4.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.4.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.4.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.4.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.4.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.4.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.4.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.4.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.4.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.4.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.4.output.dense.bias-torch.Size([768])
bert.encoder.layer.4.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.4.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.5.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.5.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.5.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.5.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.5.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.5.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.5.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.5.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.5.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.5.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.5.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.5.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.5.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.5.output.dense.bias-torch.Size([768])
bert.encoder.layer.5.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.5.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.6.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.6.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.6.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.6.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.6.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.6.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.6.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.6.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.6.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.6.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.6.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.6.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.6.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.6.output.dense.bias-torch.Size([768])
bert.encoder.layer.6.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.6.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.7.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.7.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.7.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.7.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.7.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.7.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.7.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.7.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.7.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.7.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.7.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.7.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.7.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.7.output.dense.bias-torch.Size([768])
bert.encoder.layer.7.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.7.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.8.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.8.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.8.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.8.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.8.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.8.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.8.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.8.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.8.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.8.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.8.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.8.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.8.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.8.output.dense.bias-torch.Size([768])
bert.encoder.layer.8.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.8.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.9.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.9.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.9.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.9.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.9.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.9.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.9.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.9.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.9.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.9.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.9.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.9.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.9.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.9.output.dense.bias-torch.Size([768])
bert.encoder.layer.9.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.9.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.10.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.10.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.10.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.10.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.10.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.10.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.10.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.10.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.10.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.10.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.10.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.10.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.10.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.10.output.dense.bias-torch.Size([768])
bert.encoder.layer.10.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.10.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.11.attention.self.query.weight-torch.Size([768, 768])
bert.encoder.layer.11.attention.self.query.bias-torch.Size([768])
bert.encoder.layer.11.attention.self.key.weight-torch.Size([768, 768])
bert.encoder.layer.11.attention.self.key.bias-torch.Size([768])
bert.encoder.layer.11.attention.self.value.weight-torch.Size([768, 768])
bert.encoder.layer.11.attention.self.value.bias-torch.Size([768])
bert.encoder.layer.11.attention.output.dense.weight-torch.Size([768, 768])
bert.encoder.layer.11.attention.output.dense.bias-torch.Size([768])
bert.encoder.layer.11.attention.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.11.attention.output.LayerNorm.bias-torch.Size([768])
bert.encoder.layer.11.intermediate.dense.weight-torch.Size([3072, 768])
bert.encoder.layer.11.intermediate.dense.bias-torch.Size([3072])
bert.encoder.layer.11.output.dense.weight-torch.Size([768, 3072])
bert.encoder.layer.11.output.dense.bias-torch.Size([768])
bert.encoder.layer.11.output.LayerNorm.weight-torch.Size([768])
bert.encoder.layer.11.output.LayerNorm.bias-torch.Size([768])
bert.pooler.dense.weight-torch.Size([768, 768])
bert.pooler.dense.bias-torch.Size([768])
fc.layer1.0.weight-torch.Size([2048, 1536])
fc.layer1.0.bias-torch.Size([2048])
fc.layer2.0.weight-torch.Size([1024, 2048])
fc.layer2.0.bias-torch.Size([1024])
fc.layer3.0.weight-torch.Size([28, 1024])
fc.layer3.0.bias-torch.Size([28])
code_emb.layer1.0.weight-torch.Size([384, 28])
code_emb.layer1.0.bias-torch.Size([384])
code_emb.layer2.0.weight-torch.Size([768, 384])
code_emb.layer2.0.bias-torch.Size([768])
code_emb.layer3.0.weight-torch.Size([1536, 768])
code_emb.layer3.0.bias-torch.Size([1536])
code_check.layer1.0.weight-torch.Size([768, 1536])
code_check.layer1.0.bias-torch.Size([768])
code_check.layer2.0.weight-torch.Size([384, 768])
code_check.layer2.0.bias-torch.Size([384])
code_check.layer3.0.weight-torch.Size([2, 384])
code_check.layer3.0.bias-torch.Size([2])
dec_self_attn.W_Q.weight-torch.Size([1024, 1536])
dec_self_attn.W_K.weight-torch.Size([1024, 1536])
dec_self_attn.W_V.weight-torch.Size([1024, 1536])
dec_self_attn.fc.weight-torch.Size([1536, 1024])

>>>>>>>>>>>>>>>>>>>start train......



epoch:0,	loss:29.81038808822632
right_count:1	total:433	 Answer ACC: 0.0023094688221709007
right_codes_count:0	total:433	 Code ACC: 0.0
wrong_be_tree_count:265	wrong_total:432	 wrong be tree ACC: 0.6134259259259259
save best model to ./output/test/best_model
  0%|          | 0/1730 [00:00<?, ?it/s]100%|██████████| 1730/1730 [00:00<00:00, 67258.15it/s]
  0%|          | 0/433 [00:00<?, ?it/s]100%|██████████| 433/433 [00:00<00:00, 7369.63it/s]
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.decoder.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.bias', 'cls.predictions.transform.LayerNorm.weight']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
  0%|          | 0/1730 [00:00<?, ?it/s]100%|██████████| 1730/1730 [00:00<00:00, 67865.82it/s]
  0%|          | 0/433 [00:00<?, ?it/s]100%|██████████| 433/433 [00:00<00:00, 6325.92it/s]
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.seq_relationship.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.bias', 'cls.predictions.decoder.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
  0%|          | 0/1730 [00:00<?, ?it/s]100%|██████████| 1730/1730 [00:00<00:00, 67326.80it/s]
  0%|          | 0/433 [00:00<?, ?it/s]100%|██████████| 433/433 [00:00<00:00, 10989.82it/s]
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.decoder.weight', 'cls.predictions.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
  0%|          | 0/1732 [00:00<?, ?it/s]100%|██████████| 1732/1732 [00:00<00:00, 53945.63it/s]
  0%|          | 0/431 [00:00<?, ?it/s]100%|██████████| 431/431 [00:00<00:00, 7232.60it/s]  0%|          | 0/1730 [00:00<?, ?it/s]100%|██████████| 1730/1730 [00:00<00:00, 55874.10it/s]
  0%|          | 0/433 [00:00<?, ?it/s]100%|██████████| 433/433 [00:00<00:00, 10416.60it/s]
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.predictions.bias', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).

Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.predictions.transform.LayerNorm.bias', 'cls.predictions.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.predictions.transform.dense.weight']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
>>>>>loading label2id file...
total input dataset len: 1730
after process dataset len: 1730
total passed: 0
total input dataset len: 433
after process dataset len: 433
total passed: 0
>>>>>loading label2id file...
total input dataset len: 1730
after process dataset len: 1730
total passed: 0
total input dataset len: 433
after process dataset len: 433
total passed: 0
>>>>>loading label2id file...
total input dataset len: 1730
after process dataset len: 1730
total passed: 0
total input dataset len: 433
after process dataset len: 433
total passed: 0
>>>>>loading label2id file...
total input dataset len: 1732
after process dataset len: 1732
total passed: 0
total input dataset len: 431
after process dataset len: 431
total passed: 0
>>>>>loading label2id file...
total input dataset len: 1730
after process dataset len: 1730
total passed: 0
total input dataset len: 433
after process dataset len: 433
total passed: 0
